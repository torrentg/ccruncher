
CCRUNCHER README
================


Description
--------------------------------

CCruncher computes the Value At Risk (VAR) of large credit
portfolios using the Monte Carlo method. It is a command line solver
that read an xml input file and returns a plain text file with the
simulated portfolio loss values.


Directory structure
--------------------------------

Directory structure for binary distributions:
$CCRUNCHER/
  |- bin/     : executables and scripts directory
  |- data/    : put your ccruncher outputs here (recomended)
  |- doc/     : project documentation files
  |- samples/ : input file samples

Directory structure for source distribution:
$CCRUNCHER/
  |- bin/     : executables and scripts directory
  |- build    : directory used to put the *.o files
  |- data/    : put your ccruncher outputs here (recomended)
  |- doc/     : project documentation files
  |- samples/ : input file samples
  |- src/     : source code files


Required libraries installation
--------------------------------

1. expat library
   check that you have libexpat.so in a lib directory and
   check that you have expat.h in an include directory. If
   you don't found some of these files you can download 
   package from http://www.libexpat.org/ and install it. 
   Also you can install from expat and expat-devel rpm packages.

2. libz library
   check that you have libz.so in a lib directory and
   check that you have zlib.h in an include directory. If
   you don't found some of these files you can download 
   package from http://www.zlib.net/ and install it. 
   Also you can install from zlib and zlib-devel rpm packages.

3. gsl library
   check that you have libgsl.so in a lib directory and
   check that you have gsl_math.h in an include directory. If
   you don't found some of these files you can download 
   package from http://www.gnu.org/software/gsl/ and install it. 
   Also you can install from gsl and gsl-devel rpm packages.

4. libconfig library
   check that you have libconfig.so in a lib directory and
   check that you have libconfig.h in an include directory. If
   you don't found some of these files you can download 
   package from http://www.hyperrealm.com/libconfig/ and install it. 
   Also you can install from libconfig and libconfig-devel rpm packages.

5. qt libraries (only gui version)
   check that you have libQtCore.so in a lib directory and
   check that you have QtCore in an include directory. If
   you don't found some of these files you can download 
   package from http://qt-project.org/ and install it. 
   Also you can install from qt and qt-devel rpm packages.
   
6. qwt libraries (only gui version)
   check that you have libqwt.so in a lib directory and
   check that you have qwt.h in an include directory. If
   you don't found some of these files you can download 
   package from http://qwt.sourceforge.net/ and install it. 
   Also you can install from qwt and qwt-devel rpm packages.

   
Installation from source package
--------------------------------

1. uncompress package
     > tar -xvzf ccruncher-X.Y_src.tgz

2. install required libraries (explained before)

3. execute commands (read INSTALL file):
     > cd ccruncher-X.Y
     > ./configure 
     > make check
     > qmake-qt5 -spec linux-g++-64 ccruncher-gui.pro
     > make
     > bin/src2bin.sh

   supported ./configure options:
     --enable-debug:    add debug instructions
     --enable-profiler: add profiler instructions

4. you can use the qmake build process instead of the 
   automake build process doing:
     > qmake-qt5 ccruncher-xxx.pro
     > make
     > bin/src2bin.sh


Installation from binary package
--------------------------------

1. uncompress package
     > tar -xvzf ccruncher-X.Y_bin.tgz

2. install required libraries (explained before)


Using CCruncher
--------------------------------

1. run ccruncher-inf (parameters inference using MCMC)
     # create your input file
     # use sample/inference01.cfg as starting point
     > bin/ccruncher-inf --help
     > bin/ccruncher-inf -s 99 -n 50000 -b 10000 -r 1000 samples/inference05.inf

2. run ccruncher (default loss simulation using Monte carlo)
     # create your input file
     # read the technical document (pdf doc)
     # use sample/sample05.xml as starting point
     > cd $CCRUNCHER
     > # gui version
     > bin/ccruncher-gui &
     > # cmd version
     > bin/ccruncher-cmd --help
     > bin/ccruncher-cmd -w --output=data samples/test01.xml

3. compute risk indicators
     > bin/ccruncher-gui &
     # open output data file


Notes for Windows developers (QT+MINGW)
---------------------------------------

1. Install MSYS2
   https://msys2.org
   > pacman -Suy
   > pacman -Suy
   > pacman -S mingw-w64-ucrt-x86_64-gcc
   > pacman -S mingw-w64-ucrt-x86_64-autotools
   > pacman -S mingw-w64-ucrt-x86_64-expat
   > pacman -S mingw-w64-ucrt-x86_64-zlib
   > pacman -S mingw-w64-ucrt-x86_64-gsl
   > pacman -S mingw-w64-ucrt-x86_64-libconfig
   > pacman -S autoconf-archive

2. Unpack the source tarball
   Origin = ccruncher-xxx
   Destination = C:\msys64\home\<user>\ccruncher
   > cd C:\msys64\home\<user>\ccruncher
   > touch doc/ccruncher.pdf

3. Create executables (using autotools)
   > aclocal
   > autoconf
   > automake -avcf
   > ./configure
   > make
   > make check

4. Create executables (using qt-env)
   https://wiki.qt.io/MSYS2
   > pacman -S mingw-w64-ucrt-x86_64-qt5
   > pacman -S mingw-w64-ucrt-x86_64-qwt-qt5
   > qmake ccruncher-cmd.pro
   > make
   > qmake ccruncher-inf.pro
   > make
   > qmake ccruncher-tests.pro
   > make
   > qmake ccruncher-gui.pro
   > make


Developers tips & tricks
--------------------------------

1. download CCruncher sources from repository
     > git clone git@github.com:torrentg/ccruncher.git ccruncher 

2. install required libraries
     * used by ccruncher (explained before)
     * autoconf macros (package autoconf-archive)

3. create auto-files (run only 1 time)
     > autoscan (produces preliminary configure.ac)
     > autoheader (produces config.h.in)

4. create ./configure script
     > aclocal
     > autoconf
     > automake -avcf    (--help --warnings=all)

5. compile project in debug mode
     > ./configure --enable-debug --enable-profiler
     > make
     > make check

6. executing tests suites
     > build/ccruncher-tests   # unitary tests
     > bin/tests.sh            # functional tests

7. checking memory leaks
     don't enable profiler because can cause problems to valgrind
     > valgrind --tool=memcheck --leak-check=yes <progname>
     # dealing with Qt errors:
     valgrind --tool=memcheck --leak-check=yes --gen-suppressions=all <prog> 2>valgrind.stderr
     sed '/^==/ d' valgrind.stderr > valgrind.supp
     valgrind --tool=memcheck --leak-check=yes --suppressions=valgrind.supp <prog>

8. finding vulnerabilities
     > flawfinder src/
     > cppcheck --enable=all -I ./ ./

9. static code analysis (pvs-studio)
     # https://www.viva64.com/en/b/0457/
     # https://www.viva64.com/en/m/0036/#ID0EPG
     > git clone --depth 1 git@github.com:torrentg/ccruncher.git ccruncher-rev
     > cd ccruncher-rev
     > how-to-use-pvs-studio-free -c 2 src/
     > aclocal; autoconf; automake -avcf; ./configure
     > pvs-studio-analyzer trace -- make check
     > pvs-studio-analyzer analyze -o pvs-studio.log
     > plog-converter -a GA:1,2 -t tasklist -o pvs-studio.tasks pvs-studio.log
     
10. profiling executable (only if configure is called with option --enable-profiler)
     ccruncher writes gmon.out because we compiled with -pg flag
     > gprof bin/ccruncher-cmd gmon.out
     > # with valgrind (not based on sampling, slow, don't require --enable-profiler)
     > valgrind --tool=callgrind bin/ccruncher-cmd
     > kcachegrind callgrind.out.99999
     > # with oprofile (as root)
     > modprobe oprofile
     > opcontrol --init
     > opcontrol --no-vmlinux --start
     > ./binary
     > opcontrol --dump
     > opreport -l ./binary
     > opcontrol --stop
     > opcontrol --shutdown
     > # with sysprof
     > sysprof
     > ./binary
     > # with perf
     > perf record ./binary arg1 arg2 ...
     > perf report

11. debuging executable
     > gdb ./path/progname
       >> help
       >> set args arg1 arg2 arg3 ... argn
       >> run
       >> backtrace
       >> quit

12. creating html code documentation
     > doxywizard Doxyfile
     > doxygen Doxyfile
     > firefox build/html/index.html
    
13. other minor tasks
     > # man pages creation
     > export LANG=en_GB.utf8
     > help2man --no-info -n "simule the loss distribution of a credit portfolio using the \
       Monte Carlo method" ./build/ccruncher-cmd > ccruncher-cmd.1
     > help2man --no-info -n "infer  the  dependency  parameters of the multivariate default \
       times using the Metropolis-Hastings method" ./build/ccruncher-inf > ccruncher-inf.1
     > man -l ccruncher-cmd.1
     > # lines of code
     > cloc src

14. using clang compiler (http://clang.llvm.org/)
     > #using autotools
     > ./configure CXX=clang++
     > make CXX=clang++
     > # using qmake
     > qmake -spec unsupported/linux-clang 
     > # source code static analysis
     > scan-build make

15. making source distribution package
     > make distcheck
     > make dist
    or (better) use script $CCRUNCHER/bin/makedist.sh
     > $CCRUNCHER/bin/makedist.sh -s
     > $CCRUNCHER/bin/makedist.sh -b
     > $CCRUNCHER/bin/makedist.sh -w -d /compiled/for/windows/path

16. making the rpm package
     # https://fedoraproject.org/wiki/How_to_create_an_RPM_package
     > rpmdev-setuptree
     > cp build/ccruncher.spec ~/rpmbuild/SPECS
     > cp ccruncher-X.Y.Zsrc.tgz ~/rpmbuild/SOURCES
     > cd ~/rpmbuild/
     > rpmbuild -ba SPECS/ccruncher.spec
     > rpmlint SPECS/ccruncher.spec SRPMS/ccruncher-*.rpm RPMS/x86_64/ccruncher-*.rpm
     > mock --verbose SRPMS/ccruncher-*.rpm
     > rpmdev-wipetree

17. analize code maintenability
    > tool = https://www.gnu.org/software/complexity/
    > command = ./complexity --histogram --score --thresh=3 $(find $CCRUNCHER/src/ -name \*.?pp)
    > check score values (see section -4.9 scale option- in manual)

CCruncher Team
http://www.ccruncher.net

