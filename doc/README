
CCRUNCHER README
================


Description
--------------------------------

CCruncher computes the Value At Risk (VAR) of large credit
portfolios using the Monte Carlo method. It is a command line solver
that read an xml input file and returns a plain text file with the
simulated values of portfolio.


Directory structure
--------------------------------

Directory structure for binary distributions:
$CCRUNCHER/
  |- bin/     : executables and scripts directory
  |- data/    : put your ccruncher outputs here (recomended)
  |- doc/     : doc directory
  |- samples/ : samples directory

Directory structure for source distribution:
$CCRUNCHER/
  |- bin/     : executables and scripts directory
  |- build    : directory used to put the *.o files
  |- data/    : put your output here (recomended)
  |- deps/    : source code from other projects used by ccruncher
  |- doc/     : doc directory
  |- samples/ : samples directory
  |- src/     : ccruncher source code files


Required libraries installation
--------------------------------

1. check that you have libexpat.so in a lib directory and
   check that you have expat.h in an include directory. If
   you don't found some of these files you can download 
   package from http://expat.sourceforge.net/ and install it. 
   Also you can install from expat and expat-devel rpm packages.

2. check that you have libz.so in a lib directory and
   check that you have zlib.h in an include directory. If
   you don't found some of these files you can download 
   package from http://www.zlib.net/ and install it. 
   Also you can install from zlib and zlib-devel rpm packages.

3. check that you have libgsl.so in a lib directory and
   check that you have gsl_math.h in an include directory. If
   you don't found some of these files you can download 
   package from http://www.gnu.org/software/gsl/ and install it. 
   Also you can install from gsl and gsl-devel rpm packages.

4. if you are compiling a ccruncher MPI executable, check
   that you have a valid MPI installation (you need mpi.h,
   mpic++ wrapper, mpi link library, etc.)

5. CCruncher use a statistical package named R to compute
   risk indicators. Install it from http://www.r-project.org/
   or install from R rpm package.


Installation from source package
--------------------------------

1. uncompress package
     tar -xvzf ccruncher-X.Y_src.tgz

2. install required libraries (explained before)

3. execute commands (read INSTALL file):
     cd ccruncher-X.Y
     ./configure
     make
     bin/src2bin.sh

   supported ./configure options:
     --enable-debug:    add debug instructions
     --enable-profiler: add profiler instructions
     --enable-mpi:      add mpi instructions


Installation from binary package
--------------------------------

1. uncompress package
     tar -xvzf ccruncher-X.Y_bin.tgz

2. install required libraries (explained before)


Using CCruncher
--------------------------------

1. create your input file. Read documentation to perform this step.
   use any file in samples directory as template.

2. run CCruncher
     $CCRUNCHER/bin/ccruncher --help
     $CCRUNCHER/bin/ccruncher -vf --hash=100 --path=./data samples/test01.xml

3. compute risk indicators typing:
     $CCRUNCHER/bin/ccreport.sh data/portfolio.csv
     firefox data/portfolio.html
   or open a R console and type:
     > source("$CCRUNCHER/bin/ccreport.R")
     > ccruncher.summary("$CCRUNCHER/data/portfolio.csv")
     > x <- ccruncher.read("$CCRUNCHER/data/portfolio.csv")
     > ccruncher.plot(x[[1]], alpha=0.95, var=0.99, show="all")
     > quit(save='no')


Notes for Windows developers (MSVC9)
------------------------------------

1. install a subversion client
   (eg. http://tortoisesvn.tigris.org/)

2. retrieve repository content
   (checkout from http://www.ccruncher.net/svn/trunk/)

3. download expat package from http://expat.sourceforge.net/
   and unpack at $CCRUNCHER\deps\expat-X.Y.Z directory

4. download zlib package from http://www.zlib.net/
   and unpack at $CCRUNCHER\deps\zlib-X.Y.Z directory

5. download gsl package from http://matmidia.org/alexlaier/index.php/goodies/3-stuff/26-gsl-111-port-microsoft-visual-studio-2008-vc90.html
   and unpack at $CCRUNCHER\deps\ directory

6. copy zlib1.dll and libexpat.dll (installed in steps 3 and 4) to
   $CCRUNCHER\bin (required to execute bin\ccruncher.exe)

7. double-click ccruncher.vcproj (opens MSVC9)

8. execute compile option

Microsoft Visual C++ versions:
 - MSVC6: don't work at all
 - MSVC7: possibly works, but need to create the file project
 - MSVC8: possibly works, but need to create the file project
 - MSVC9: works. see current file project


Notes for Windows developers (cygwin)
-------------------------------------

1. retrieve repository content
   (checkout from http://www.ccruncher.net/svn/trunk/)

2. install gcc, aclocal, autoconf, automake, expat, gsl and zlib
   cygwin packages

3. open a cygwin console

4. execute next commands:
     > aclocal
     > autoconf
     > automake -a -v -c -f
     > ./configure
     > make


Notes on MPI version
--------------------------------

1. check that your mpi environment is enabled
     > export PATH=$PATH:/usr/share/openmpi/1.2.4-gcc/bin64/
     > export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64/openmpi/1.2.4-gcc/
     > export LIBRARY_PATH=$LIBRARY_PATH:/usr/lib64/openmpi/1.2.4-gcc/
     > export C_INCLUDE_PATH=$C_INCLUDE_PATH:/usr/include/openmpi/1.2.4-gcc/
     > export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/usr/include/openmpi/1.2.4-gcc/


Developers tips & tricks
--------------------------------

1. download CCruncher sources from subversion repositori
     svn checkout http://www.ccruncher.net/svn/trunk/ ccruncher 

2. install required libraries (explained before)

3. create auto-files (run only 1 time)
     autoscan (produces configure.in)
     autoheader (produces config.h.in)

4. create ./configure script
     aclocal
     autoconf
     automake -avcf    (--help --warnings=all)

5. compile project in debug mode
     ./configure --enable-debug --enable-profiler
     make
     make check
   or compile project enabling MPI
     ./configure --prefix=$PWD --enable-debug --enable-profiler --enable-mpi
     make
     make check

6. executing test suite
     build/tests

7. checking memory leaks
     don't enable profiler because can cause problems to valgrind
     valgrind --tool=memcheck --leak-check=yes <progname>

8. profiling executable (only if ./configure called with option --enable-profiler)
     ./path/progname (-> writes gmon.out because we compiled with -pg flag)
     gprof ./path/progname gmon.out

9. debuging executable
     gdb ./path/progname
       > help
       > set args arg1 arg2 arg3 ... argn
       > run
       > backtrace
       > quit

10. creating pdf documentation
      $CCRUNCHER/doc/tex/make
      $CCRUNCHER/doc/tex/make install

11. making source distribution package
      make distcheck
      make dist
    or (better) use script $CCRUNCHER/bin/makedist.sh
      $CCRUNCHER/bin/makedist.sh -s
      $CCRUNCHER/bin/makedist.sh -l
      $CCRUNCHER/bin/makedist.sh -w -d /compiled/for/windows/path

12. create a tag in subversion repository
      svn cp http://www.ccruncher.net/svn/trunk/ \
             http://www.ccruncher.net/svn/tags/ccruncher-x.y/ \
             -m "created tag ccruncher-x.y"


CCruncher Team
http://www.ccruncher.net

